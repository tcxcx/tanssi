// Copyright (C) Moondance Labs Ltd.
// This file is part of Tanssi.

// Tanssi is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Tanssi is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Tanssi.  If not, see <http://www.gnu.org/licenses/>


//! Autogenerated weights for pallet_foresta_collectives
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-03-04, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Rafats-Mac-mini.local`, CPU: `<UNKNOWN>`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/container-chain-template-simple-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_foresta_collectives
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --wasm-execution=compiled
// --template=./benchmarking/frame-weight-template.hbs
// --output
// pallets/foresta-collectives/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_foresta_collectives.
pub trait WeightInfo {
	fn add_collective() -> Weight;
	fn add_member() -> Weight;
}

/// Weights for pallet_foresta_collectives using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `ForestaCollectives::CollectivesCount` (r:1 w:1)
	/// Proof: `ForestaCollectives::CollectivesCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::MembersCount` (r:1 w:1)
	/// Proof: `ForestaCollectives::MembersCount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `CarbonCredits::AuthorizedAccounts` (r:1 w:1)
	/// Proof: `CarbonCredits::AuthorizedAccounts` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::Managers` (r:0 w:1)
	/// Proof: `ForestaCollectives::Managers` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::CollectivesMap` (r:0 w:1)
	/// Proof: `ForestaCollectives::CollectivesMap` (`max_values`: None, `max_size`: Some(152), added: 2627, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::Members` (r:0 w:1)
	/// Proof: `ForestaCollectives::Members` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn add_collective() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `3489`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3489)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: `ForestaCollectives::Members` (r:1 w:1)
	/// Proof: `ForestaCollectives::Members` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::Managers` (r:1 w:0)
	/// Proof: `ForestaCollectives::Managers` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::MembersCount` (r:1 w:1)
	/// Proof: `ForestaCollectives::MembersCount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn add_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `361`
		//  Estimated: `3646`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3646)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: `ForestaCollectives::CollectivesCount` (r:1 w:1)
	/// Proof: `ForestaCollectives::CollectivesCount` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::MembersCount` (r:1 w:1)
	/// Proof: `ForestaCollectives::MembersCount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	/// Storage: `CarbonCredits::AuthorizedAccounts` (r:1 w:1)
	/// Proof: `CarbonCredits::AuthorizedAccounts` (`max_values`: Some(1), `max_size`: Some(321), added: 816, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::Managers` (r:0 w:1)
	/// Proof: `ForestaCollectives::Managers` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::CollectivesMap` (r:0 w:1)
	/// Proof: `ForestaCollectives::CollectivesMap` (`max_values`: None, `max_size`: Some(152), added: 2627, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::Members` (r:0 w:1)
	/// Proof: `ForestaCollectives::Members` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn add_collective() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `113`
		//  Estimated: `3489`
		// Minimum execution time: 21_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3489)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: `ForestaCollectives::Members` (r:1 w:1)
	/// Proof: `ForestaCollectives::Members` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::Managers` (r:1 w:0)
	/// Proof: `ForestaCollectives::Managers` (`max_values`: None, `max_size`: Some(181), added: 2656, mode: `MaxEncodedLen`)
	/// Storage: `ForestaCollectives::MembersCount` (r:1 w:1)
	/// Proof: `ForestaCollectives::MembersCount` (`max_values`: None, `max_size`: Some(24), added: 2499, mode: `MaxEncodedLen`)
	fn add_member() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `361`
		//  Estimated: `3646`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(18_000_000, 3646)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
}
